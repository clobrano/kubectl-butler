#!/usr/bin/env bash
# -*- coding: UTF-8 -*-
## Wrapper script round kubectl that uses fzf [1] to select target resource without the need to
## provide name or namespace manually.
## 
## usage:
##      $ kubectl-butler <kind> [--namespace <namespace> --selector <selector> ]
## 
## or just
##      $ kubectl-butler
## 
## to select one of the last commands run by kubectl-butler
## 
## kubectl-butler works in three stesp:
## 1. Get all the cluster resources of <kind> (or the ones under --namespace if provided) and let
##    you fuzzy search a specific one, getting its name, and namespace if any.
## 2. Select one of the usual kubectl verbs (get, logs, describe, ...) and compose the command line
## 3. Give you a chance to edit the command line, adding more flags or, e.g., pipe the result to
##    another program.
## 
## The final command line is executed and stored under $HOME/.kb.lastcommands together with the
## last 10 unique commands issued.
## 
## options:
##      -n, --namespace <namespace> The namespace into which kubectl-butler will look for the resources [default: --all-namespaces]
##      -s, --selector <selector>   Selector (label query) to filter on
##      -c, --clean                 Clean $HOME/.kb.lastcommands history

# get the positional arguments first unless it's --help
if [[ $1 != "--help" ]] && [[ $1 != "-h" ]]; then
    kind=$1
    shift
fi

# then parse flags
# CLInt GENERATED_CODE: start
# info: https://github.com/clobrano/CLInt.git
# Default values
_namespace=--all-namespaces

# Converting long-options into short ones
for arg in "$@"; do
  shift
  case "$arg" in
"--namespace") set -- "$@" "-n";;
"--selector") set -- "$@" "-s";;
"--clean") set -- "$@" "-c";;
"--help") set -- "$@" "-h";;
  *) set -- "$@" "$arg"
  esac
done

function print_illegal() {
    echo Unexpected flag in command line \"$@\"
}

# Parsing flags and arguments
while getopts 'hcn:s:' OPT; do
    case $OPT in
        h) sed -ne 's/^## \(.*\)/\1/p' $0
           exit 1 ;;
        c) _clean=1 ;;
        n) _namespace=$OPTARG ;;
        s) _selector=$OPTARG ;;
        \?) print_illegal $@ >&2;
            echo "---"
            sed -ne 's/^## \(.*\)/\1/p' $0
            exit 1
            ;;
    esac
done
# CLInt GENERATED_CODE: end

KB_HISTORY_FILENAME=$HOME/.kb.lastcommands
KB_HISTORY_LEN=${KB_HISTORY_LEN:-30}
DEFAULT_PORT_FORWARD=${DEFAULT_PORT_FORWARD:-40000}

if [[ -n ${_clean} ]]; then
    echo > ${KB_HISTORY_FILENAME}
    exit 0
fi

if [[ -z ${kind} ]]; then
    if [[ ! -f ${KB_HISTORY_FILENAME} ]] || [[ $(cat ${KB_HISTORY_FILENAME} | wc --lines) -eq 0 ]]; then
        echo "[!] Cannot repeat last command: history is empty."
        exit 0
    fi

    echo "[+] repeating command from history (${KB_HISTORY_FILENAME}) "
    cmd=$(tac ${KB_HISTORY_FILENAME} | \
        fzf --prompt "Search and Select: " \
            --header=$'You can edit the command after selection\n\n' \
            --border \
            --layout=reverse \
            --height=70% )
else
    if [[ ${_namespace} = "--all-namespaces" ]]; then
        NN=${_namespace}
    else
        NN="--namespace ${_namespace}"
    fi

    if [[ -n ${_selector} ]]; then
        SELECTOR="--selector ${_selector}"
    else
        _selector="empty"
        SELECTOR=""
    fi

    # Get the resource's info first
    # We will parse the header of the response to see where are the columns NAME and NAMESPACE (note
    # that NAMESPACE might not exist and the script will handle it)
    tmp_file="/tmp/kk_tempfile_$$"
    kubectl get ${kind} ${NN} ${SELECTOR} -o wide > ${tmp_file}
    RESOURCE_INFO=$(cat ${tmp_file} | \
        fzf --prompt "Search and Select ${kind} under ${_namespace} Namespace and ${_selector} selector: " \
        --header=$'Press CTRL-R to reload\n\n' \
        --header-lines=1 \
        --border \
        --preview='echo {}' \
        --preview-window=up:3:wrap \
        --layout=reverse \
            --height=70% \
        --bind "ctrl-r:reload(kubectl get ${kind} ${NN} ${SELECTOR} -o wide)"
        )
    header=$(cat ${tmp_file} | head -n 1)
    rm ${tmp_file}

    if [[ -z ${RESOURCE_INFO} ]]; then
        exit 0
    fi

    name_col=$(echo "$header" | tr -s ' ' '\n' | grep -n '^NAME$' | cut -d: -f1)
    namespace_col=$(echo "$header" | tr -s ' ' '\n' | grep -n '^NAMESPACE$' | cut -d: -f1)

    # Get NAME and NS
    NAME=$(echo ${RESOURCE_INFO} | awk -v name_col="$name_col" {'print $name_col'})
    if [[ -z ${NAME} ]]; then
        echo "[!] could not find ${kind} object name"
        exit 1
    fi
    if [[ ${_namespace} != "--all-namespaces" ]]; then
        NS=${_namespace}
    else if [[ -n ${namespace_col} ]]; then
            NS=$(echo ${RESOURCE_INFO} | awk -v namespace_col="$namespace_col" {'print $namespace_col'})
        fi
    fi

    # supported kubectl actions (do not change indentation)
    supported_actions="get             Display one or many resources
logs            Print the logs for a container in a pod
describe        Show details of a specific resource or group of resources
edit            Edit a resource on the server
delete          Delete resources by file names, stdin, resources and names, or by resources and label selector
exec            Execute a command in a container
port-forward    Forward one or more local ports to a pod (default port ${DEFAULT_PORT_FORWARD})
"

    # Select the action via FZF
    action=$(echo "${supported_actions}" | \
        fzf --prompt "Select the action: " \
            --layout=reverse --height=70% \
            --border | awk '{ print $1 }')

    if [[ ${action} == "logs" ]]; then
        if [[ -n ${NS} ]]; then
            cmd="kubectl logs ${NAME} -n ${NS} --follow"
        else
            cmd="kubectl logs ${NAME}"
        fi
    else
        if [[ -n ${NS} ]]; then
            if [[ ${action} == "port-forward" ]]; then
                cmd="oc ${action} pod/${NAME} -n ${NS} ${DEFAULT_PORT_FORWARD}"
            else
                cmd="kubectl ${action} ${kind} ${NAME} -n ${NS}"
            fi
        else
            cmd="kubectl ${action} ${kind} ${NAME}"
        fi
    fi
fi

if [[ "$#" -gt 0 ]]; then
    echo "[+] command history is stored in ${KB_HISTORY_FILENAME}. Run $0 without arguments to select an old command."
fi

echo -e "[+] command will be: \e[4m$cmd\e[0m"
echo -en "[+] type \e[4my and then ENTER\e[0m, to edit the command before execute or just \e[4mENTER\e[0m to continue: "
read res
if [[ ${res} == "y" ]]; then
    if [[ -z $EDITOR ]]; then
        set -e
        echo "[!] EDITOR environment variable not found. Trying with nano"
        EDITOR=nano
    fi
    echo $cmd > /tmp/kk.lastcommand
    $EDITOR /tmp/kk.lastcommand
    cmd=$(cat /tmp/kk.lastcommand)
fi

# exit if no command is created
[[ -z ${cmd} ]] && exit 0


echo "executing: $cmd"

# Keep the last $KB_HISTORY_LEN commands in KB_HISTORY_FILENAME file
echo "$cmd" >> ${KB_HISTORY_FILENAME}
cat ${KB_HISTORY_FILENAME} | uniq -u | tail -$KB_HISTORY_LEN > ${KB_HISTORY_FILENAME}.tmp
cat ${KB_HISTORY_FILENAME}.tmp > ${KB_HISTORY_FILENAME}

eval "$cmd"
